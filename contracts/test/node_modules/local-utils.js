const {ethers} = require('@nomiclabs/buidler');
async function expectRevert(promise, expectedMessage) {
  if (typeof promise === 'undefined') {
    promise = expectedMessage;
    expectedMessage = null;
  }
  let receipt;
  try {
    receipt = await promise;
  } catch (error) {
    const isExpectedMessagePresent = !expectedMessage || error.message.search(expectedMessage) >= 0;
    if (!isExpectedMessagePresent) {
      throw new Error(`Revert message : "${expectedMessage}" not present, instead got : "${error.message}"`);
    }
    return true;
  }

  if (receipt.status === '0x0') {
    if (expectedMessage) {
      throw new Error(`Revert message not parsed : "${expectedMessage}"`);
    }
    return true;
  }
// throw new Error(`Revert expected`);
}

let extraTime = 0;
async function increaseTime(numSec) {
  await ethers.provider.send('evm_increaseTime', [numSec]);
  extraTime += numSec;
}

function getTime() {
  return Math.floor(Date.now() / 1000) + extraTime;
}

function objMap(obj, func, options) {
  const newObj = {};
  Object.keys(obj).map(function (key, index) {
    const keyAsNumber = parseInt(key, 10);
    if (isNaN(keyAsNumber) || keyAsNumber >= obj.length) {
      let item = obj[key];
      if (options && options.depth > 0 && typeof item === "object") {
        item = objMap(item, func, {depth: options.depth - 1});
      } else {
        item = func(item, index);
      }
      newObj[key] = item;
    }
  });
  return newObj;
}


module.exports = {
  zeroAddress: '0x0000000000000000000000000000000000000000',
  emptyBytes: '0x',
  expectRevert,
  increaseTime,
  getTime,
  waitFor: (p) => p.then((tx) => tx.wait()),
  objMap
};
